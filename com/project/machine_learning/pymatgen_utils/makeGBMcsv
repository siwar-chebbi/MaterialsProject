#! /usr/local/bin/python2.7

from __future__ import division, print_function, unicode_literals

import json
import math
import numpy as np
import os
import string
import sys
from gbml.elasticity import get_element_aiab_energy
from monty.json import MontyDecoder
from numpy import array
from pymatgen.core.periodic_table import Element
from pymatgen.core.composition import Composition

# Local variables
from com.project.machine_learning.pymatgen_utils import holder, voronoi_tools

DEBUG = False  # Turning on Debug creates a ';' delimted csv file for debugging
CSV_OLD = '~/prj/elasticity/predictorRefinement/ec_2015-06-23_ChvEng.csv'
CSV_VETTED = '~/prj/elasticity/predictorRefinement/ec_2015-10-15_Vetted.csv'
CSV_VETTED_NCUCELL = '~/prj/elasticity/predictorRefinement/ec_2015-11-12_Vetted-NCUCell.csv'  # non-conventional unit cells


# Function to handle 'no data' strings
def checkData(field):
    if field is None:
        sys.stderr.write('  Warning: A None field was set to zero in checkData.\n')
        return '0'
    if isinstance(field, str) and field[:7] == 'no data':
        sys.stderr.write('  Warning: A \'no data\' field was set to zero in checkData.\n')
        return '0'
    else:
        return field


# Check usage
if len(sys.argv) < 2:
    print('\n  Usage: makeGBMcsv <jsonFile>\n')
    sys.exit(1)

# Print output header
if DEBUG is False:
    print('mpID,formula,warnings,flag_new,flag_ncucell,flag_fblock,flag_hubbard,nElems,nSites,spcGrp,crySys,pntGrp,' +
          'K,KV,KR,G,GV,GR,aniso,cepa,rho,vol,lvpa,apf,eah,fepa,bandGap,' +
          'eBlPtHn4A,eBlPtHn3A,eBlPtHn2A,eBlPtHn1A,eBlPtH0A,eBlPtH1A,eBlPtH2A,eBlPtH3A,eBlPtH4A,' +
          'eBlPtH0S,eBlPtH1S,eBlPtH2S,eBlPtH3S,eBlPtH4S,' +
          'eMlPtHn4A,eMlPtHn3A,eMlPtHn2A,eMlPtHn1A,eMlPtH0A,eMlPtH1A,eMlPtH2A,eMlPtH3A,eMlPtH4A,' +
          'eMlPtH0S,eMlPtH1S,eMlPtH2S,eMlPtH3S,eMlPtH4S,' +
          'eRadHn4A,eRadHn3A,eRadHn2A,eRadHn1A,eRadH0A,eRadH1A,eRadH2A,eRadH3A,eRadH4A,' +
          'eRadH0S,eRadH1S,eRadH2S,eRadH3S,eRadH4S,' +
          'eXHn4A,eXHn3A,eXHn2A,eXHn1A,eXH0A,eXH1A,eXH2A,eXH3A,eXH4A,' +
          'eXH0S,eXH1S,eXH2S,eXH3S,eXH4S,' +
          'eZHn4A,eZHn3A,eZHn2A,eZHn1A,eZH0A,eZH1A,eZH2A,eZH3A,eZH4A,' +
          'eZH0S,eZH1S,eZH2S,eZH3S,eZH4S,' +
          'eRowHn4A,eRowHn3A,eRowHn2A,eRowHn1A,eRowH0A,eRowH1A,eRowH2A,eRowH3A,eRowH4A,' +
          'eRowH0S,eRowH1S,eRowH2S,eRowH3S,eRowH4S,' +
          'eGrpHn4A,eGrpHn3A,eGrpHn2A,eGrpHn1A,eGrpH0A,eGrpH1A,eGrpH2A,eGrpH3A,eGrpH4A,' +
          'eGrpH0S,eGrpH1S,eGrpH2S,eGrpH3S,eGrpH4S,' +
          'eAtMHn4A,eAtMHn3A,eAtMHn2A,eAtMHn1A,eAtMH0A,eAtMH1A,eAtMH2A,eAtMH3A,eAtMH4A,' +
          'eAtMH0S,eAtMH1S,eAtMH2S,eAtMH3S,eAtMH4S,' +
          'eAIABHn4A,eAIABHn3A,eAIABHn2A,eAIABHn1A,eAIABH0A,eAIABH1A,eAIABH2A,eAIABH3A,eAIABH4A,' +
          'eAIABH0S,eAIABH1S,eAIABH2S,eAIABH3S,eAIABH4S,' +
          'sCoorHn4A,sCoorHn3A,sCoorHn2A,sCoorHn1A,sCoorH0A,sCoorH1A,sCoorH2A,sCoorH3A,sCoorH4A,' +
          'sCoorH0S,sCoorH1S,sCoorH2S,sCoorH3S,sCoorH4S,' +
          'sBnLnHn4AH1A,sBnLnHn3AH1A,sBnLnHn2AH1A,sBnLnHn1AH1A,sBnLnH0AH1A,sBnLnH1AH1A,sBnLnH2AH1A,sBnLnH3AH1A,sBnLnH4AH1A,' +
          'sBnLnH0SH1A,sBnLnH1SH1A,sBnLnH2SH1A,sBnLnH3SH1A,sBnLnH4SH1A,' +
          'sBnLnH0AH1S,sBnLnH1AH1S,sBnLnH2AH1S,sBnLnH3AH1S,sBnLnH4AH1S,' +
          'sBnLnH1SH1S,sBnLnH2SH1S,sBnLnH3SH1S,sBnLnH4SH1S,' +
          'sBnAnHn4AH1A,sBnAnHn3AH1A,sBnAnHn2AH1A,sBnAnHn1AH1A,sBnAnH0AH1A,sBnAnH1AH1A,sBnAnH2AH1A,sBnAnH3AH1A,sBnAnH4AH1A,' +
          'sBnAnH0SH1A,sBnAnH1SH1A,sBnAnH2SH1A,sBnAnH3SH1A,sBnAnH4SH1A,' +
          'sBnAnH0AH1S,sBnAnH1AH1S,sBnAnH2AH1S,sBnAnH3AH1S,sBnAnH4AH1S,' +
          'sBnAnH1SH1S,sBnAnH2SH1S,sBnAnH3SH1S,sBnAnH4SH1S,' +
          'sRowADH0AH1A,sRowADH1AH1A,sRowADH2AH1A,sRowADH3AH1A,sRowADH4AH1A,sRowADH1SH1A,sRowADH2SH1A,sRowADH3SH1A,sRowADH4SH1A,' +
          'sRowADH0AH1S,sRowADH1AH1S,sRowADH2AH1S,sRowADH3AH1S,sRowADH4AH1S,sRowADH1SH1S,sRowADH2SH1S,sRowADH3SH1S,sRowADH4SH1S,' +
          'sRowSDH1AH1A,sRowSDH2AH1A,sRowSDH4AH1A,sRowSDH1SH1A,sRowSDH2SH1A,sRowSDH4SH1A,' +
          'sRowSDH1AH1S,sRowSDH2AH1S,sRowSDH4AH1S,sRowSDH1SH1S,sRowSDH2SH1S,sRowSDH4SH1S,' +
          'sGrpADH0AH1A,sGrpADH1AH1A,sGrpADH2AH1A,sGrpADH3AH1A,sGrpADH4AH1A,sGrpADH1SH1A,sGrpADH2SH1A,sGrpADH3SH1A,sGrpADH4SH1A,' +
          'sGrpADH0AH1S,sGrpADH1AH1S,sGrpADH2AH1S,sGrpADH3AH1S,sGrpADH4AH1S,sGrpADH1SH1S,sGrpADH2SH1S,sGrpADH3SH1S,sGrpADH4SH1S,' +
          'sGrpSDH1AH1A,sGrpSDH2AH1A,sGrpSDH4AH1A,sGrpSDH1SH1A,sGrpSDH2SH1A,sGrpSDH4SH1A,' +
          'sGrpSDH1AH1S,sGrpSDH2AH1S,sGrpSDH4AH1S,sGrpSDH1SH1S,sGrpSDH2SH1S,sGrpSDH4SH1S,' +
          'sAtMADH0AH1A,sAtMADH1AH1A,sAtMADH2AH1A,sAtMADH3AH1A,sAtMADH4AH1A,sAtMADH1SH1A,sAtMADH2SH1A,sAtMADH3SH1A,sAtMADH4SH1A,' +
          'sAtMADH0AH1S,sAtMADH1AH1S,sAtMADH2AH1S,sAtMADH3AH1S,sAtMADH4AH1S,sAtMADH1SH1S,sAtMADH2SH1S,sAtMADH3SH1S,sAtMADH4SH1S,' +
          'sAtMSDH1AH1A,sAtMSDH2AH1A,sAtMSDH4AH1A,sAtMSDH1SH1A,sAtMSDH2SH1A,sAtMSDH4SH1A,' +
          'sAtMSDH1AH1S,sAtMSDH2AH1S,sAtMSDH4AH1S,sAtMSDH1SH1S,sAtMSDH2SH1S,sAtMSDH4SH1S,' +
          'sRadADH0AH1A,sRadADH1AH1A,sRadADH2AH1A,sRadADH3AH1A,sRadADH4AH1A,sRadADH1SH1A,sRadADH2SH1A,sRadADH3SH1A,sRadADH4SH1A,' +
          'sRadADH0AH1S,sRadADH1AH1S,sRadADH2AH1S,sRadADH3AH1S,sRadADH4AH1S,sRadADH1SH1S,sRadADH2SH1S,sRadADH3SH1S,sRadADH4SH1S,' +
          'sRadSDH1AH1A,sRadSDH2AH1A,sRadSDH4AH1A,sRadSDH1SH1A,sRadSDH2SH1A,sRadSDH4SH1A,' +
          'sRadSDH1AH1S,sRadSDH2AH1S,sRadSDH4AH1S,sRadSDH1SH1S,sRadSDH2SH1S,sRadSDH4SH1S,' +
          'sXADH0AH1A,sXADH1AH1A,sXADH2AH1A,sXADH3AH1A,sXADH4AH1A,sXADH1SH1A,sXADH2SH1A,sXADH3SH1A,sXADH4SH1A,' +
          'sXADH0AH1S,sXADH1AH1S,sXADH2AH1S,sXADH3AH1S,sXADH4AH1S,sXADH1SH1S,sXADH2SH1S,sXADH3SH1S,sXADH4SH1S,' +
          'sXSDH1AH1A,sXSDH2AH1A,sXSDH4AH1A,sXSDH1SH1A,sXSDH2SH1A,sXSDH4SH1A,' +
          'sXSDH1AH1S,sXSDH2AH1S,sXSDH4AH1S,sXSDH1SH1S,sXSDH2SH1S,sXSDH4SH1S,' +
          'sZADH0AH1A,sZADH1AH1A,sZADH2AH1A,sZADH3AH1A,sZADH4AH1A,sZADH1SH1A,sZADH2SH1A,sZADH3SH1A,sZADH4SH1A,' +
          'sZADH0AH1S,sZADH1AH1S,sZADH2AH1S,sZADH3AH1S,sZADH4AH1S,sZADH1SH1S,sZADH2SH1S,sZADH3SH1S,sZADH4SH1S,' +
          'sZSDH1AH1A,sZSDH2AH1A,sZSDH4AH1A,sZSDH1SH1A,sZSDH2SH1A,sZSDH4SH1A,' +
          'sZSDH1AH1S,sZSDH2AH1S,sZSDH4AH1S,sZSDH1SH1S,sZSDH2SH1S,sZSDH4SH1S')
else:
    print('mpID;eElms;eWts;eBlPt;eMlPt;eRad;eX;eZ;eRow;eGrp;eAtM;eAIAB;' +
          'sCoor;sBnLnAvg;sBnLnStd;sBnAnAvg;sBnAnStd;sRowADAvg;sRowADStd;sRowSDAvg;sRowSDStd;' +
          'sGrpADAvg;sGrpADStd;sGrpSDAvg;sGrpSDStd;sAtMADAvg;sAtMADStd;sAtMSDAvg;sAtMSDStd;' +
          'sRadADAvg;sRadADStd;sRadSDAvg;sRadSDStd;sXADAvg;sXADStd;sXSDAvg;sXSDStd;' +
          'sZADAvg;sZADStd;sZSDAvg;sZSDStd')

# Read json input file
with open(sys.argv[1], 'r') as jsonFile:
    queryList = json.loads(jsonFile.read(), cls=MontyDecoder)
    jsonFile.close()

# Loop over query items
for queryItem in queryList:
    flag_new = 0
    flag_ncucell = 0
    flag_fblock = 0
    flag_hubbard = 0

    # Extract compound values
    mpID = str(queryItem['material_id'])
    sys.stderr.write('mpID: {}\n'.format(mpID))

    formula = str(queryItem['pretty_formula'])
    warnings = ' '.join(queryItem['warnings'])
    nSites = int(queryItem['nsites'])
    nElems = int(queryItem['nelements'])
    rho = float(queryItem['density'])
    vol = float(queryItem['volume'])
    epa = float(queryItem['energy_per_atom'])
    lvpa = math.log10(vol / nSites)
    eah = float(queryItem['e_above_hull'])
    fepa = float(queryItem['formation_energy_per_atom'])
    bandGap = float(queryItem['band_gap'])
    crySys = str(queryItem['spacegroup']['crystal_system'])
    pntGrp = str(queryItem['spacegroup']['point_group'])
    spcGrp = int(queryItem['spacegroup']['number'])

    # Is this compound vetted?
    grep_cmd = 'grep \'^' + mpID + '$\' ' + CSV_VETTED + ' 1>/dev/null 2>&1'
    ret_value = os.system(grep_cmd)
    grep_cmd = 'grep \'^' + mpID + '$\' ' + CSV_VETTED_NCUCELL + ' 1>/dev/null 2>&1'
    ret_value2 = os.system(grep_cmd)
    if ret_value2 == 0:
        flag_ncucell = 1
    if ret_value > 0 and ret_value2 > 0:
        sys.stderr.write('  Warning: Skipping {}, which is not on vetted list\n'.format(mpID))
        continue  # Don't include in output file!

    if bool(queryItem['is_hubbard']):
        flag_hubbard = 1
        sys.stderr.write('  Warning: Skipping {}, which has is_hubbard flag\n'.format(mpID))
        continue  # Don't include in output file!

    # Is this compound new since 2015-06-23?
    grep_cmd = 'grep \'^' + mpID + ',\' ' + CSV_OLD + ' 1>/dev/null 2>&1'
    ret_value = os.system(grep_cmd)
    if ret_value > 0:
        flag_new = 1

    # Extract compound elasticity values
    if queryItem['elasticity'] == None:
        sys.stderr.write('  Warning: Skipping {}, which has no elasticity data\n'.format(mpID))
    else:
        K = float(queryItem['elasticity']['K_Voigt_Reuss_Hill'])
        KV = float(queryItem['elasticity']['K_Voigt'])
        KR = float(queryItem['elasticity']['K_Reuss'])

        G = float(queryItem['elasticity']['G_Voigt_Reuss_Hill'])
        GV = float(queryItem['elasticity']['G_Voigt'])
        GR = float(queryItem['elasticity']['G_Reuss'])

        aniso = float(queryItem['elasticity']['universal_anisotropy'])  # vs elastic_anisotropy?
        if queryItem['elasticity']['universal_anisotropy'] != None:
            aniso = float(queryItem['elasticity']['universal_anisotropy'])
        else:
            sys.stderr.write('  Warning: {} is missing universal_anisotropy\n'.format(mpID))
            if queryItem['elasticity']['elastic_anisotropy'] != None:
                aniso = float(queryItem['elasticity']['elastic_anisotropy'])
            else:
                sys.stderr.write('  Warning: {} is missing universal_anisotropy and elastic_anisotropy\n'.format(mpID))

    # Build elemental property lists for compound
    eElms = []
    eWts = []
    eAIAB = []
    eBlPt = []
    eMlPt = []
    eRad = []
    eX = []
    eZ = []
    eRow = []
    eGrp = []
    eAtmM = []

    comp = Composition(formula)
    for iElmKey, iAmt in comp.get_el_amt_dict().iteritems():
        iElm = Element(iElmKey)
        eElms.append(iElm)
        eWts.append(float(comp.get_atomic_fraction(iElm)))

        aiab_energy = get_element_aiab_energy(iElmKey)  # aiab = atom-in-a-box
        if aiab_energy is None:
            sys.stderr.write('  Warning: In {} element {} has aiab_energy of None\n'.format(mpID, iElmKey))
            aiab_energy = 1.0
        eAIAB.append(float(aiab_energy))

        if iElm.block == 'f':
            flag_fblock = 1

        iElms__eBlPt = float(string.replace(string.replace(checkData(iElm.boiling_point), ' K', ''), '(white P) ', ''))
        if iElms__eBlPt == 0:
            if iElmKey == 'Pa':
                iElms__eBlPt = 4273
            else:
                sys.stderr.write('  Warning: In {} element {} has boiling point of None\n'.format(mpID, iElmKey))
        eBlPt.append(float(iElms__eBlPt))

        iElms__eMlPt = float(string.replace(string.replace(checkData(iElm.melting_point), ' K', ''), '(white P) ', ''))
        if iElms__eMlPt == 0:
            sys.stderr.write('  Warning: In {} element {} has melting point of None\n'.format(mpID, iElmKey))
        eMlPt.append(float(iElms__eMlPt))

        # Note: # atomic_radius_calculated is often significantly larger than empirical value
        if iElm.atomic_radius == None:
            if iElm.atomic_radius_calculated == None:
                sys.stderr.write('  Warning: In {} element {} has radius of None\n'.format(mpID, iElmKey))
            else:
                # Use calculated atomic radius when empirical value is None
                eRad.append(float(iElm.atomic_radius_calculated))
                err_str = '  Warning: In {} element {} has unknown empirical atomic radius, but was assigned calculated radius of {}\n'
                sys.stderr.write(err_str.format(mpID, iElmKey, iElm.atomic_radius_calculated))
        else:
            eRad.append(float(iElm.atomic_radius))

        if iElm.X == 0:
            sys.stderr.write(
                '  Warning: In {} element {} has no assigned electronegativity in pymatgen\n'.format(mpID, iElmKey))
            # Subsitute best guess values from wikipedia element pages when possible
            if iElmKey == 'Pm':
                iElm__X = 1.13
            elif iElmKey == 'Eu':
                iElm__X = 1.2
            elif iElmKey == 'Tb':
                iElm__X = 1.2
            elif iElmKey == 'Yb':
                iElm__X = 1.1
            else:
                iElm__X = 0.1  # Make non-zero to avoid log() issues
                sys.stderr.write(
                    '  Warning: In {} element {} was assigned an electronegativity of 0.1\n'.format(mpID, iElmKey))
        else:
            iElm__X = iElm.X
        eX.append(float(iElm__X))

        eZ.append(float(iElm.Z))
        eRow.append(float(iElm.row))  # Currently excluding compounds with F-block elements!
        eGrp.append(float(iElm.group))
        # eRow and eGrp based on a 32 group PT layout
        #   row = iElm.row if iElm.row < 8 else iElm.row - 2
        #   grp = iElm.group + 14 if (iElm.group > 2 and iElm.row < 8) else iElm.group
        #   eRow.append( float(row) )
        #   eGrp.append( float(grp) )
        eAtmM.append(float(iElm.atomic_mass))

    # Skip compouds with any F-block elements
    if flag_fblock == 1:
        sys.stderr.write('  Warning: Skipping {}, which has F-block elements\n'.format(mpID))
        continue  # Don't include in output file!

    # Calculate subsequent properites
    cepa = float(queryItem['energy_per_atom']) - holder.mean(eAIAB, 1.0, weights=eWts)
    apf = 4.0 / 3 * math.pi * nSites / vol * holder.mean(array(eRad) ** 3, 1.0, weights=eWts)  # atomic packing factor




    # Construct Voronoi neighbor dictionaries
    structure = queryItem['structure']
    try:
        (voronoi_neighbor_sites, voronoi_neighbor_pairs) = voronoi_tools.get_voronoi_dicts(structure)
    except RuntimeError:
        sys.stderr.write('  Error: Voronoi failed for {}\n'.format(mpID))
        continue

    # Print initial (non-Holder) descriptors
    if DEBUG is False:
        print('{:s},{:s},{:s},{:d},{:d},{:d},{:d},{:d},{:d},{:d},{:s},{:s}'.format(mpID, formula,
                                                                                   warnings, flag_new, flag_ncucell,
                                                                                   flag_fblock, flag_hubbard, nElems,
                                                                                   nSites, spcGrp, crySys, pntGrp),
              end='')
        for variable in [K, KV, KR, G, GV, GR, aniso, cepa, rho, vol, lvpa, apf, eah, fepa, bandGap]:
            print(',{:.10f}'.format(variable), end='')
    else:
        print('{:s};{:s};{:s};{:s};{:s};{:s};{:s};{:s};{:s};{:s};{:s};{:s}'.format(mpID,
                                                                                   eElms, eWts, eBlPt, eMlPt, eRad, eX,
                                                                                   eZ, eRow, eGrp, eAtmM,
                                                                                   np.abs(eAIAB)), end='')

    # Calculate and print (non-Voronoi based) Holder descriptors:
    #   eBlPtHn4A,eBlPtHn3A,eBlPtHn2A,eBlPtHn1A,eBlPtH0A,eBlPtH1A,eBlPtH2A,eBlPtH3A,eBlPtH4A
    #   eBlPtH0S,eBlPtH1S,eBlPtH2S,eBlPtH3S,eBlPtH4S
    if DEBUG is False:
        for property in [eBlPt, eMlPt, eRad, eX, eZ, eRow, eGrp, eAtmM, np.abs(eAIAB)]:
            holder.print_means(property, [-4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0], weights=eWts)
            holder.print_stdevs(property, [0.0, 1.0, 2.0, 3.0, 4.0],
                                weights=eWts)  # No negative Holder stdevs due to zero valued centered means
    #     holder.print_cfvars(property, [1.0], weights=eWts)

    # Calc and print Voronoi based coordination descriptors:
    #   sCoorHn4A,sCoorHn3A,sCoorHn2A,sCoorHn1A,sCoorH0A,sCoorH1A,sCoorH2A,sCoorH3A,sCoorH4A
    #   sCoorH0S,sCoorH1S,sCoorH2S,sCoorH3S,sCoorH4S
    site_means = voronoi_tools.get_coordinations(voronoi_neighbor_sites)
    if DEBUG is False:
        holder.print_means(site_means, [-4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0])
        holder.print_stdevs(site_means,
                            [0.0, 1.0, 2.0, 3.0, 4.0])  # No negative Holder means due to zero valued centered means
    #   holder.print_cfvars(site_means, [1.0])
    else:
        print(';{:s}'.format(site_means), end='')

    # Calc and print Voronoi based bond length descriptors:
    #   sBnLnHn4AH1A,sBnLnHn3AH1A,sBnLnHn2AH1A,sBnLnHn1AH1A,sBnLnH0AH1A,sBnLnH1AH1A,sBnLnH2AH1A,sBnLnH3AH1A,sBnLnH4AH1A
    #   sBnLnH0SH1A,sBnLnH1SH1A,sBnLnH2SH1A,sBnLnH3SH1A,sBnLnH4SH1A
    #   sBnLnH0AH1S,sBnLnH1AH1S,sBnLnH2AH1S,sBnLnH3AH1S,sBnLnH4AH1S
    #               sBnLnH1SH1S,sBnLnH2SH1S,sBnLnH3SH1S,sBnLnH4SH1S
    (site_means, site_stdevs) = voronoi_tools.get_bond_lengths(voronoi_neighbor_sites)
    if DEBUG is False:
        holder.print_means(site_means, [-4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0])
        holder.print_stdevs(site_means,
                            [0.0, 1.0, 2.0, 3.0, 4.0])  # No negative Holder means due to zero valued centered means
        #   holder.print_cfvars(site_means,  [1.0])
        holder.print_means(site_stdevs, [0.0, 1.0, 2.0, 3.0, 4.0])  # No negative Holder means due to zero valued diffs
        holder.print_stdevs(site_stdevs, [1.0, 2.0, 3.0, 4.0])  # No non-positive Holder stdevs due to zero valued diffs
    #   holder.print_cfvars(site_stdevs, [1.0])
    else:
        print(';{:s};{:s}'.format(site_means, site_stdevs), end='')

    # Calc and print Voronoi based bond angle descriptors:
    #   sBnAnHn4AH1A,sBnAnHn3AH1A,sBnAnHn2AH1A,sBnAnHn1AH1A,sBnAnH0AH1A,sBnAnH1AH1A,sBnAnH2AH1A,sBnAnH3AH1A,sBnAnH4AH1A
    #   sBnAnH0SH1A,sBnAnH1SH1A,sBnAnH2SH1A,sBnAnH3SH1A,sBnAnH4SH1A
    #   sBnAnH0AH1S,sBnAnH1AH1S,sBnAnH2AH1S,sBnAnH3AH1S,sBnAnH4AH1S
    #               sBnAnH1SH1S,sBnAnH2SH1S,sBnAnH3SH1S,sBnAnH4SH1S
    (site_means, site_stdevs) = voronoi_tools.get_bond_angles(voronoi_neighbor_pairs)
    if DEBUG is False:
        holder.print_means(site_means, [-4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0])
        holder.print_stdevs(site_means,
                            [0.0, 1.0, 2.0, 3.0, 4.0])  # No negative Holder means due to zero valued centered means
        #   holder.print_cfvars(site_means,  [1.0])
        holder.print_means(site_stdevs, [0.0, 1.0, 2.0, 3.0, 4.0])  # No negative Holder means due to zero valued diffs
        holder.print_stdevs(site_stdevs, [1.0, 2.0, 3.0, 4.0])  # No non-positive Holder stdevs due to zero valued diffs
    #   holder.print_cfvars(site_stdevs, [1.0])
    else:
        print(';{:s};{:s}'.format(site_means, site_stdevs), end='')

    # Calculate and print Voronoi based Holder descriptors of neighbor differences:
    # *** With vetting/coding, could add: eBlPt, eMlPt, AIAB ***
    #   sRowADH0AH1A,sRowADH1AH1A,sRowADH2AH1A,sRowADH3AH1A,sRowADH4AH1A, sRowADH1SH1A,sRowADH2SH1A,sRowADH3SH1A,sRowADH4SH1A
    #   sRowADH0AH1S,sRowADH1AH1S,sRowADH2AH1S,sRowADH3AH1S,sRowADH4AH1S, sRowADH1SH1S,sRowADH2SH1S,sRowADH3SH1S,sRowADH4SH1S
    #   sRowSDH1AH1A,sRowSDH2AH1A,sRowSDH4AH1A,                           sRowSDH1SH1A,sRowSDH2SH1A,sRowSDH4SH1A
    #   sRowSDH1AH1S,sRowSDH2AH1S,sRowSDH4AH1S,                           sRowSDH1SH1S,sRowSDH2SH1S,sRowSDH4SH1S
    for property in ['row', 'group', 'atomic_mass', 'atomic_radius', 'X', 'Z']:
        (site_means, site_stdevs) = voronoi_tools.get_property_diffs(voronoi_neighbor_sites, property, abs_flag=True)
        if DEBUG is False:
            holder.print_means(site_means,
                               [0.0, 1.0, 2.0, 3.0, 4.0])  # No negative Holder means due to zero valued diffs
            holder.print_stdevs(site_means,
                                [1.0, 2.0, 3.0, 4.0])  # No non-positive Holder stdevs due to zero valued diffs
            #     holder.print_cfvars(site_means,  [1.0])
            holder.print_means(site_stdevs,
                               [0.0, 1.0, 2.0, 3.0, 4.0])  # No negative Holder means due to zero valued diffs
            holder.print_stdevs(site_stdevs,
                                [1.0, 2.0, 3.0, 4.0])  # No non-positive Holder stdevs due to zero valued diffs
        #     holder.print_cfvars(site_stdevs, [1.0])
        else:
            print(';{:s};{:s}'.format(site_means, site_stdevs), end='')

        (site_means, site_stdevs) = voronoi_tools.get_property_diffs(voronoi_neighbor_sites, property, abs_flag=False)
        if DEBUG is False:
            holder.print_means(site_means,
                               [1.0, 2.0, 4.0])  # No non-positive or cubic Holder means due to negative values
            holder.print_stdevs(site_means,
                                [1.0, 2.0, 4.0])  # No non-positive or cubic Holder means due to negative values
            #     holder.print_cfvars(site_means,  [1.0])
            holder.print_means(site_stdevs,
                               [1.0, 2.0, 4.0])  # No non-positive or cubic Holder means due to negative values
            holder.print_stdevs(site_stdevs,
                                [1.0, 2.0, 4.0])  # No non-positive or cubic Holder means due to negative values
        #     holder.print_cfvars(site_stdevs, [1.0])
        else:
            print(';{:s};{:s}'.format(site_means, site_stdevs), end='')

    # Add line return
    print()
